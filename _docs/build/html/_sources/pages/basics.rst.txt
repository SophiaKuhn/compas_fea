=======
Summary
=======

A top-down summary of the **Structure** object can be printed with method ``.summary()``. This will print information such as the number of nodes and elements, the name of sets and how many items in their selection, and the name and type of added objects such as **Materials**, **Sections**, **Loads**, **Displacements** and **Steps**. This summary is useful for checking that nodes, elements and objects have been added correctly before any analysis is performed.

.. code-block:: python

   >>> mdl.summary()
   --------------------------------------------------
   Structure summary
   --------------------------------------------------
   Nodes: 5
   Elements: 5
   Sets:
       nset_base : 4 node(s)
       nset_top : 1 node(s)
       elset_beams : 4 element(s)
       elset_shell : 1 element(s)
   Materials:
       mat_elastic : ElasticIsotropic
   Sections:
       sec_circ : CircularSection
       sec_shell : ShellSection
   Loads:
       load_point : PointLoad
       load_gravity : GravityLoad
   Displacements:
       disp_pinned : PinnedDisplacement
   Constraints:
   Interactions:
   Misc:
   Steps:
       step_bc : GeneralStep
       step_loads : GeneralStep
   --------------------------------------------------


==================
Loading and saving
==================

The method and function to save and load a created **Structure** object are ``.save_to_obj()`` and ``load_from_obj()`` respectively, where a filename string is given for the location of the file. This will save or load data as a pickled ``.obj`` containing all populated dictionaries and objects. A confirmation message will be displayed upon save and load.

.. code-block:: python

   >>> mdl.save_to_obj('/home/al/Temp/simple-truss.obj')
   ***** Structure saved as: /home/al/Temp/simple-truss.obj *****

   >>> from compas_fea.structure.structure import load_from_obj
   >>> mdl = load_from_obj('/home/al/Temp/simple-truss.obj')
   ***** Structure loaded from: /home/al/Temp/simple-truss.obj *****

